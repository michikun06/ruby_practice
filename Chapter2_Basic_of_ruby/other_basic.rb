# ガベージコレクション
## Rubyでは使用されなくなったオブジェクトを回収して自動的にメモリ解放する。この仕組みをガベージコレクションという。

# エイリアスメソッド
## 名前が異なるだけで同じ処理を行うメソッドのこと。例えば以下の二つはエイリアスメソッド。自分で定義可能。
puts "hello".length
puts "hello".size

# 式(Expression)と文(Statement)
## rubyは他の言語では文とみなされるような要素が式になっていることもある。ここでは「文」と「式」の違いを以下のように定義する
## 式 : 値を返して、結果を変数に代入できるもの
## 文 : 値を返さず、変数に代入しようとすると構文エラーになるもの
## 上記のように定義すると「if」「メソッド」も「文」ではなく「式」となります。「if文」と呼ばれていますが、正しくは「if式」です。

# 擬似変数
## 条件式で出てきたnil,true,falseは擬似変数と呼ばれる特殊な変数である。rubyには他にも以下のような擬似変数が存在します。
## ・self : オブジェクト自身のこと
## ・__FILE__ : 現在のソースファイル名
## ・__LINE__ : 現在のソースファイル中の行番号
## ・__ENCODING__ : 現在のソースファイルのスクリプトエンコーディング
## これらは予約語の一つなので変数として扱うことはできない。

# 参照の概念を理解する
## rubyの変数にはオブジェクトそのものではなく、オブジェクトへの参照が格納されている。（　⇦　ここ大事　）
## 変数がどのオブジェクトを参照しているかは「object_id」メソッドで調べることができる
a = "hello"
b = "hello"
puts a.object_id   #=>70360280300280
puts b.object_id   #=>70360280300120  どちらも別の変数を参照していることがわかる。
c = b
puts c.object_id   #=>70360280300120  bと同じidが格納されていて、参照もとが同じであることがわかる
## ※参照元が同じである場合に注意する点は変数の変更が参照先のオブジェクトに影響を与えるということ。

# 標準ライブラリ、組み込みライブラリ、gemについて
## rubyには標準ライブラリが用意されているその中でも特に利用頻度が高いのが「組み込みライブラリ」である。
## 非公式の開発者が作成している外部ライブラリのことをgemという

# require
## 組み込みライブラリでない標準ライブラリ、gemを使用するときにrequieを用いて読み込む必要がある。
## 自分の作成したrubyファイルを読み込む際に使う（.rbは省略可能）

# load
## requireは一度しか読み込めないが、loadは何度も無条件に読みここむことができる。しかし.rbは省略できない。

# puts、print、pの違いについて
## puts : 出力後の改行あり、配列ごとの改行あり（要素ごと）、to_sメソッド、nil
## print : 出力後の改行なし、配列ごとの改行なし、to_sメソッド、nil
## p : 出力後の改行あり、配列ごとの改行なし、inspect、引数のオブジェクト