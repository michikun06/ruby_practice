# 正規表現では「=~」を用いるとマッチしたら真、しなかったらnilが返る
# 「!~」ではその逆(マッチしたら偽)
puts "---------if文による判定----------"
if "123-4567" =~ /\d{3}-\d{4}/
    puts "マッチしました。"
else
    puts "マッチしませんでした。"
end


puts "---------MatchDataオブジェクトによるデータの抽出----------"
text = "私の誕生日は1977年7月17日です。"
match = /(\d+)年(\d+)月(\d+日)/.match(text)
p match[0]     #=>"1977年7月17日"  マッチした全体部分を取得する
p match[1]     #=>"1977"  キャプチャの1番目の取得
p match[2, 2]     #=>["7", "17日"]   キャプチャの2番目から２個取得
p match[-1]     #=>"17日"  一番最後のキャプチャを取得
p match[1..3]     #=>["1977", "7", "17"]  Rangeを用いて1から3までを取得する


puts "---------キャプチャに名前をつける----------"
# 上ではmatch[2]といった感じで数字で呼び出していたが名前をつけることができる
named_match = /(?<year>\d+)年(?<month>\d+)月(?<day>\d+日)/.match(text)
p named_match[:month]     #=>"7"  シンボルで名前を指定
p named_match["year"]     #=>"1997"  文字列で名前を指定
p named_match[3]     #=>"17日"  数字で指定


puts "---------キャプチャの名前がそのままローカル変数になる----------"
if /(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/ =~ text
    p "#{year}/#{month}/#{day}"
end
# ※ 正規表現を左辺に、文字列を右辺において=~演算子を使った時のみ使える（逆は不可）


# 正規表現と組み合わせると便利なメソッド

puts "---------scanメソッド----------"
# 引数で渡した正規表現にマッチする部分で配列を作成して返る
p "123 456 789".scan(/\d+/)     #=>["123", "456", "789"]
p "1997年7月17日　2016年12月31日".scan(/(?:\d+)年(?:\d+)月(?:\d+)日/)     #=>["1997年7月17日", "2016年12月31日"]
# ※キャプチャしたくない場合は[?:]をつける


puts "---------[],slice,slice!----------"
address = "郵便番号は123-4567です"
p address[/\d{3}-\d{4}/]     #=>"123-4567"

# キャプチャを使う際は第二引数で取得する正規表現を指定することができる
texts = "生年月日は1997年7月17日"
p texts[/(\d+)年(\d+)月(\d+)日/, 3]

# slice : []のエイリアスメソッド
# slice! : マッチした部分を元のデータから破壊的に取り除く


puts "---------split----------"
# マッチした文字列を区切り文字にして配列として返す
number = "123,456-789"
p number.split(",")     #=>["123", "456-789"]
p number.split(/,|-/)     #=>["123", "456", "789"]


puts "---------gsub,gsub!----------"
# 第一引数で指定した正規表現にマッチした部分を、第二引数で指定した文字列に置き換える
p number.gsub(",", "-")     #=>"123-456-789"
p number.gsub(/,|-/, "...")     #=>"123...456...789"

# 名前月キャプチャを用いると下記のように参照できる(\k<name>)
p texts.gsub(
    /(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/,
    '\k<year>-\k<month>-\k<day>'
)     #=>"生年月日は1997-7-17"

# 第二引数にハッシュを指定して変換のルールを指定できる
hash = { ',' => ':', '-' => '/' }     # カンマをコロンにハイフンをスラッシュに変換させるハッシュを作成
p number.gsub(/,|-/, hash)     #=>"123:456/789"

# gsub!で文字列の内容を破壊的に変更する
number.gsub!(/,|-/, ',')
p number     #=>"123,456,789"